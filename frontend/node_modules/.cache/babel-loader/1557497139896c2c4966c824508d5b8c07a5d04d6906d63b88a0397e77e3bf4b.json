{"ast":null,"code":"/* class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    this._authorization = headers.authorization;\n  }\n \n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\"\n      },\n    }).then(this._checkResponse);\n  }\n\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method:'GET',\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\"\n      },\n    }).then(this._checkResponse);\n  }\n\n  setProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  setAvatarImg(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  setCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({ name, link }),\n    }).then(this._checkResponse);\n  }\n\n  addLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._checkResponse);\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._checkResponse);\n  }\n}\n\n\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default api; */\n\nclass Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject;\n  }\n  _request(url, options) {\n    return fetch(`${this._url}${url}`, options).then(this._checkResponse);\n  }\n  getPro() {\n    return this._request('/users/me', {\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n  setUserInfo(data) {\n    return this._request('/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.username,\n        about: data.job\n      })\n    });\n  }\n  getCards() {\n    return this._request('/cards', {\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n  addCard(data) {\n    return this._request('/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link\n      })\n    });\n  }\n  setNewAvatar(data) {\n    return this._request('/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    });\n  }\n  deleteCard(cardId) {\n    return this._request(`/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n  deleteLike(cardId) {\n    return this._request(`/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n  addLike(cardId) {\n    return this._request(`/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n}\n\n/*создаю экземпляр класса Api*/\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-66',\n  headers: {\n    authorization: '9f4d5ff3-f724-49c2-9657-4a12392beeb3',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","baseUrl","_headers","headers","_authorization","authorization","_checkResponse","res","ok","json","Promise","reject","_request","url","fetch","then","getPro","setUserInfo","data","method","body","JSON","stringify","name","username","about","job","getCards","addCard","title","link","setNewAvatar","avatar","deleteCard","cardId","deleteLike","addLike","api"],"sources":["/Users/superkica/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["/* class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    this._authorization = headers.authorization;\n  }\n \n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\"\n      },\n    }).then(this._checkResponse);\n  }\n\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method:'GET',\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\"\n      },\n    }).then(this._checkResponse);\n  }\n\n  setProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  setAvatarImg(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  setCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({ name, link }),\n    }).then(this._checkResponse);\n  }\n\n  addLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._checkResponse);\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._checkResponse);\n  }\n}\n\n\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default api; */\n\nclass Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers\n    this._authorization = options.headers.authorization\n  }\n\n  _checkResponse(res) {return res.ok ? res.json() : Promise.reject}\n\n  _request(url, options) {\n    return fetch(`${this._url}${url}`, options)\n      .then(this._checkResponse)\n  }\n\n  getPro() {\n    return this._request('/users/me', {\n      headers: {\n        authorization: this._authorization\n      }\n    })\n  }\n\n\n  setUserInfo(data) {\n    return this._request('/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.username,\n        about: data.job,\n      })\n    })\n  }\n\n  getCards() {\n    return this._request('/cards', {\n      headers: {\n        authorization: this._authorization\n      }\n    })\n  }\n\n  addCard(data) {\n    return this._request('/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link,\n      })\n    })\n  }\n\n  setNewAvatar(data) {\n    return this._request('/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      })\n    })\n  }\n\n  deleteCard(cardId) {\n    return this._request(`/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    })\n  }\n\n  deleteLike(cardId) {\n    return this._request(`/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    })\n  }\n\n  addLike(cardId) {\n    return this._request(`/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._authorization\n      }\n    })\n  }\n}\n\n/*создаю экземпляр класса Api*/\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-66',\n  headers: {\n    authorization: '9f4d5ff3-f724-49c2-9657-4a12392beeb3',\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default api\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}